@ARTICLE{becker2008a,
  author = {Steffen Becker and Heiko Koziolek and Ralf Reussner},
  title = {{The Palladio Component Model for Model-driven Performance Prediction}},
  journal = {Journal of Systems and Software},
  year = {2009},
  volume = {82},
  pages = {3--22},
  doi = {10.1016/j.jss.2008.03.066},
  publisher = {Elsevier Science Inc.},
  url = {http://dx.doi.org/10.1016/j.jss.2008.03.066}
}

@inproceedings{Kleehaus2018,
   abstract = {Microservices are an approach to distributed systems that promote the use of finely grained services with their own lifecycles. This architecture style encourages high decoupling, independent deployment, operation and maintenance. However, those benefits also leave a certain aftertaste, especially in continuous documentation of the overall architecture. It is fundamental to keep track of how microservices emerge over time. This knowledge is documented manually in Enterprise Architecture (EA) tools, which leads to an obsolete status. For that reason, we present a novel multi-layer microservice architecture recovery approach called MICROLYZE that recovers the infrastructure in realtime based on the EA model involving the business, application, hardware layer and the corresponding relationship between each other. It leverages existing monitoring tools and combines the run-time data with static built-time information. Hereby, MICROLYZE provide tool support for mapping the business activities with technical transactions in order to recover the correlation between the business and application layer.},
   author = {Martin Kleehaus and Ömer Uludağ and Patrick Schäfer and Florian Matthes},
   doi = {10.1007/978-3-319-92901-9_14},
   issn = {18651348},
   journal = {Lecture Notes in Business Information Processing},
   title = {MICROLYZE: A framework for recovering the software architecture in microservice-based environments},
   volume = {317},
   year = {2018},
}
@inproceedings{Alshuqayran2018,
   abstract = {Micro service architectures are rapidly establishing themselves in the software industry as a more efficient and effective substitute for monolithic applications. In a micro service architecture, the application is broken down into many small elements called micro services. These are managed in a distributed way and typically involve several development teams. In such an environment, an architectural model can get lost along the way, making it difficult to perform many downstream software engineering tasks, such as migration, audit, integration or impact analysis. To address this problem, we are developing support for Micro Service Architecture Recovery (MiSAR) using a Model Driven Engineering approach. In this paper, we describe an empirical study which aims to identify the core elements of our approach, by undertaking manual analysis on 8 micro service-based open source projects. From this analysis, we define a metamodel for micro service-based architectures and a set of mapping rules which map between the software and the metamodel. The resulting metamodel and mapping rules provide a solid foundation for any micro service architecture recovery approach and hence are a key first step towards managing the architectural integrity of micro service-based applications.},
   author = {Nuha Alshuqayran and Nour Ali and Roger Evans},
   doi = {10.1109/ICSA.2018.00014},
   journal = {Proceedings - 2018 IEEE 15th International Conference on Software Architecture, ICSA 2018},
   title = {(MiSAR) Towards Micro Service Architecture Recovery: An Empirical Study},
   year = {2018},
}
@inproceedings{Mayer2018,
   abstract = {Microservices decouple network-accessible system components to support independent development, deployment, and scalability. The architecture of microservice-based software systems is typically not de?ned upfront but emerges by dynamically assembling services to systems. This makes it hard to extract component relations from static sources since component relationships may only become evident at runtime. Existing systems focus either on the static structure of service relations, neglecting runtime properties, or on (short-term) monitoring of runtime properties to detect errors. We present an approach to extract and analyze the architecture of a microservice-based software system based on a combination of static service information with infrastructure-related and aggregated runtime information.},
   author = {Benjamin Mayer and Rainer Weinreich},
   doi = {10.1109/SOSE.2018.00012},
   journal = {Proceedings - 12th IEEE International Symposium on Service-Oriented System Engineering, SOSE 2018 and 9th International Workshop on Joint Cloud Computing, JCC 2018},
   title = {An Approach to Extract the Architecture of Microservice-Based Software Systems},
   year = {2018},
}
@inproceedings{Singh2021,
   abstract = {Software systems architected using multiple technologies are becoming popular. Many developers use these technologies as it offers high service quality which has often been optimized in terms of performance. In spite of the fact that performance is a key to the technology-mixed software applications, still there a little research on performance evaluation approaches explicitly considering the extraction of architecture for modelling and predicting performance. In this paper, we discuss the opportunities and challenges in applying existing architecture extraction approaches to support model-driven performance prediction for technology-mixed software. Further, we discuss how it can be extended to support a message-based system. We describe how various technologies deriving the architecture can be transformed to create the performance model. In order to realise the work, we used a case study from the energy system domain as an running example to support our arguments and observations throughout the paper.},
   author = {Snigdha Singh and Yves Richard Kirschner and Anne Koziolek},
   doi = {10.1145/3447545.3451201},
   journal = {ICPE 2021 - Companion of the ACM/SPEC International Conference on Performance Engineering},
   title = {Towards extraction of message-based communication in mixed-technology architectures for performance model},
   year = {2021},
}
@article{Singh2022,
   author = {Snigdha Singh and Dominik Werle and Anne Koziolek},
   journal = {European Conference on Software Architecture},
   title = {ARCHI4MOM: Using Tracing Information to Extract the Architecture of Microservice-Based Systems from Message-Oriented Middleware},
   year = {2022},
}
@inproceedings{Brosig2011,
   author = {Fabian Brosig and Nikolaus Huber and Samuel Kounev},
   doi = {10.1109/ASE.2011.6100052},
   isbn = {978-1-4577-1639-3},
   journal = {2011 26th IEEE/ACM International Conference on Automated Software Engineering (ASE 2011)},
   month = {11},
   pages = {183-192},
   publisher = {IEEE},
   title = {Automated extraction of architecture-level performance models of distributed component-based systems},
   year = {2011},
}
